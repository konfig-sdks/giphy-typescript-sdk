/* tslint:disable */
/* eslint-disable */
/*
Giphy API

Giphy API

The version of the OpenAPI document: 1.0
Contact: support@giphy.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GifsGetByIdResponse } from '../models';
// @ts-ignore
import { GifsGetByIdsResponse } from '../models';
// @ts-ignore
import { GifsGetRandomGifResponse } from '../models';
// @ts-ignore
import { GifsGetTrendingGifsResponse } from '../models';
// @ts-ignore
import { GifsSearchGifsResponse } from '../models';
// @ts-ignore
import { GifsTranslatePhraseGifResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GifsApi - axios parameter creator
 * @export
 */
export const GifsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a GIF given that GIF\'s unique ID 
         * @summary Get GIF by Id
         * @param {number} gifId Filters results by specified GIF ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (gifId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gifId' is not null or undefined
            assertParamExists('getById', 'gifId', gifId)
            const localVarPath = `/gifs/{gifId}`
                .replace(`{${"gifId"}}`, encodeURIComponent(String(gifId !== undefined ? gifId : `-gifId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api_key", keyParamName: "apiKey", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/gifs/{gifId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A multiget version of the get GIF by ID endpoint. 
         * @summary Get GIFs by ID
         * @param {string} [ids] Filters results by specified GIF IDs, separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIds: async (ids?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gifs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api_key", keyParamName: "apiKey", configuration})
            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/gifs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
         * @summary Random GIF
         * @param {string} [tag] Filters results by specified tag.
         * @param {string} [rating] Filters results by specified rating.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomGif: async (tag?: string, rating?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gifs/random`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api_key", keyParamName: "apiKey", configuration})
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (rating !== undefined) {
                localVarQueryParameter['rating'] = rating;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/gifs/random',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team.  The data returned mirrors the GIFs showcased on the GIPHY homepage. Returns 25 results by default. 
         * @summary Trending GIFs
         * @param {number} [limit] The maximum number of records to return.
         * @param {number} [offset] An optional results offset.
         * @param {string} [rating] Filters results by specified rating.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrendingGifs: async (limit?: number, offset?: number, rating?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gifs/trending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api_key", keyParamName: "apiKey", configuration})
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (rating !== undefined) {
                localVarQueryParameter['rating'] = rating;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/gifs/trending',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search all GIPHY GIFs for a word or phrase. Punctuation will be stripped and ignored.  Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho. 
         * @summary Search GIFs
         * @param {string} q Search query term or prhase.
         * @param {number} [limit] The maximum number of records to return.
         * @param {number} [offset] An optional results offset.
         * @param {string} [rating] Filters results by specified rating.
         * @param {string} [lang] Specify default language for regional content; use a 2-letter ISO 639-1 language code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGifs: async (q: string, limit?: number, offset?: number, rating?: string, lang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('searchGifs', 'q', q)
            const localVarPath = `/gifs/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api_key", keyParamName: "apiKey", configuration})
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (rating !== undefined) {
                localVarQueryParameter['rating'] = rating;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/gifs/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIF 
         * @summary Translate phrase to GIF
         * @param {string} s Search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translatePhraseGif: async (s: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 's' is not null or undefined
            assertParamExists('translatePhraseGif', 's', s)
            const localVarPath = `/gifs/translate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api_key", keyParamName: "apiKey", configuration})
            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/gifs/translate',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GifsApi - functional programming interface
 * @export
 */
export const GifsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GifsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a GIF given that GIF\'s unique ID 
         * @summary Get GIF by Id
         * @param {GifsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: GifsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GifsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.gifId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A multiget version of the get GIF by ID endpoint. 
         * @summary Get GIFs by ID
         * @param {GifsApiGetByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIds(requestParameters: GifsApiGetByIdsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GifsGetByIdsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIds(requestParameters.ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
         * @summary Random GIF
         * @param {GifsApiGetRandomGifRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRandomGif(requestParameters: GifsApiGetRandomGifRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GifsGetRandomGifResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRandomGif(requestParameters.tag, requestParameters.rating, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team.  The data returned mirrors the GIFs showcased on the GIPHY homepage. Returns 25 results by default. 
         * @summary Trending GIFs
         * @param {GifsApiGetTrendingGifsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrendingGifs(requestParameters: GifsApiGetTrendingGifsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GifsGetTrendingGifsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrendingGifs(requestParameters.limit, requestParameters.offset, requestParameters.rating, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search all GIPHY GIFs for a word or phrase. Punctuation will be stripped and ignored.  Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho. 
         * @summary Search GIFs
         * @param {GifsApiSearchGifsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchGifs(requestParameters: GifsApiSearchGifsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GifsSearchGifsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchGifs(requestParameters.q, requestParameters.limit, requestParameters.offset, requestParameters.rating, requestParameters.lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIF 
         * @summary Translate phrase to GIF
         * @param {GifsApiTranslatePhraseGifRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async translatePhraseGif(requestParameters: GifsApiTranslatePhraseGifRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GifsTranslatePhraseGifResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.translatePhraseGif(requestParameters.s, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GifsApi - factory interface
 * @export
 */
export const GifsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GifsApiFp(configuration)
    return {
        /**
         * Returns a GIF given that GIF\'s unique ID 
         * @summary Get GIF by Id
         * @param {GifsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: GifsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<GifsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A multiget version of the get GIF by ID endpoint. 
         * @summary Get GIFs by ID
         * @param {GifsApiGetByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIds(requestParameters: GifsApiGetByIdsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GifsGetByIdsResponse> {
            return localVarFp.getByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
         * @summary Random GIF
         * @param {GifsApiGetRandomGifRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomGif(requestParameters: GifsApiGetRandomGifRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GifsGetRandomGifResponse> {
            return localVarFp.getRandomGif(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team.  The data returned mirrors the GIFs showcased on the GIPHY homepage. Returns 25 results by default. 
         * @summary Trending GIFs
         * @param {GifsApiGetTrendingGifsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrendingGifs(requestParameters: GifsApiGetTrendingGifsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GifsGetTrendingGifsResponse> {
            return localVarFp.getTrendingGifs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search all GIPHY GIFs for a word or phrase. Punctuation will be stripped and ignored.  Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho. 
         * @summary Search GIFs
         * @param {GifsApiSearchGifsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGifs(requestParameters: GifsApiSearchGifsRequest, options?: AxiosRequestConfig): AxiosPromise<GifsSearchGifsResponse> {
            return localVarFp.searchGifs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIF 
         * @summary Translate phrase to GIF
         * @param {GifsApiTranslatePhraseGifRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translatePhraseGif(requestParameters: GifsApiTranslatePhraseGifRequest, options?: AxiosRequestConfig): AxiosPromise<GifsTranslatePhraseGifResponse> {
            return localVarFp.translatePhraseGif(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getById operation in GifsApi.
 * @export
 * @interface GifsApiGetByIdRequest
 */
export type GifsApiGetByIdRequest = {
    
    /**
    * Filters results by specified GIF ID.
    * @type {number}
    * @memberof GifsApiGetById
    */
    readonly gifId: number
    
}

/**
 * Request parameters for getByIds operation in GifsApi.
 * @export
 * @interface GifsApiGetByIdsRequest
 */
export type GifsApiGetByIdsRequest = {
    
    /**
    * Filters results by specified GIF IDs, separated by commas.
    * @type {string}
    * @memberof GifsApiGetByIds
    */
    readonly ids?: string
    
}

/**
 * Request parameters for getRandomGif operation in GifsApi.
 * @export
 * @interface GifsApiGetRandomGifRequest
 */
export type GifsApiGetRandomGifRequest = {
    
    /**
    * Filters results by specified tag.
    * @type {string}
    * @memberof GifsApiGetRandomGif
    */
    readonly tag?: string
    
    /**
    * Filters results by specified rating.
    * @type {string}
    * @memberof GifsApiGetRandomGif
    */
    readonly rating?: string
    
}

/**
 * Request parameters for getTrendingGifs operation in GifsApi.
 * @export
 * @interface GifsApiGetTrendingGifsRequest
 */
export type GifsApiGetTrendingGifsRequest = {
    
    /**
    * The maximum number of records to return.
    * @type {number}
    * @memberof GifsApiGetTrendingGifs
    */
    readonly limit?: number
    
    /**
    * An optional results offset.
    * @type {number}
    * @memberof GifsApiGetTrendingGifs
    */
    readonly offset?: number
    
    /**
    * Filters results by specified rating.
    * @type {string}
    * @memberof GifsApiGetTrendingGifs
    */
    readonly rating?: string
    
}

/**
 * Request parameters for searchGifs operation in GifsApi.
 * @export
 * @interface GifsApiSearchGifsRequest
 */
export type GifsApiSearchGifsRequest = {
    
    /**
    * Search query term or prhase.
    * @type {string}
    * @memberof GifsApiSearchGifs
    */
    readonly q: string
    
    /**
    * The maximum number of records to return.
    * @type {number}
    * @memberof GifsApiSearchGifs
    */
    readonly limit?: number
    
    /**
    * An optional results offset.
    * @type {number}
    * @memberof GifsApiSearchGifs
    */
    readonly offset?: number
    
    /**
    * Filters results by specified rating.
    * @type {string}
    * @memberof GifsApiSearchGifs
    */
    readonly rating?: string
    
    /**
    * Specify default language for regional content; use a 2-letter ISO 639-1 language code.
    * @type {string}
    * @memberof GifsApiSearchGifs
    */
    readonly lang?: string
    
}

/**
 * Request parameters for translatePhraseGif operation in GifsApi.
 * @export
 * @interface GifsApiTranslatePhraseGifRequest
 */
export type GifsApiTranslatePhraseGifRequest = {
    
    /**
    * Search term.
    * @type {string}
    * @memberof GifsApiTranslatePhraseGif
    */
    readonly s: string
    
}

/**
 * GifsApiGenerated - object-oriented interface
 * @export
 * @class GifsApiGenerated
 * @extends {BaseAPI}
 */
export class GifsApiGenerated extends BaseAPI {
    /**
     * Returns a GIF given that GIF\'s unique ID 
     * @summary Get GIF by Id
     * @param {GifsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GifsApiGenerated
     */
    public getById(requestParameters: GifsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return GifsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A multiget version of the get GIF by ID endpoint. 
     * @summary Get GIFs by ID
     * @param {GifsApiGetByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GifsApiGenerated
     */
    public getByIds(requestParameters: GifsApiGetByIdsRequest = {}, options?: AxiosRequestConfig) {
        return GifsApiFp(this.configuration).getByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
     * @summary Random GIF
     * @param {GifsApiGetRandomGifRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GifsApiGenerated
     */
    public getRandomGif(requestParameters: GifsApiGetRandomGifRequest = {}, options?: AxiosRequestConfig) {
        return GifsApiFp(this.configuration).getRandomGif(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team.  The data returned mirrors the GIFs showcased on the GIPHY homepage. Returns 25 results by default. 
     * @summary Trending GIFs
     * @param {GifsApiGetTrendingGifsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GifsApiGenerated
     */
    public getTrendingGifs(requestParameters: GifsApiGetTrendingGifsRequest = {}, options?: AxiosRequestConfig) {
        return GifsApiFp(this.configuration).getTrendingGifs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search all GIPHY GIFs for a word or phrase. Punctuation will be stripped and ignored.  Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho. 
     * @summary Search GIFs
     * @param {GifsApiSearchGifsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GifsApiGenerated
     */
    public searchGifs(requestParameters: GifsApiSearchGifsRequest, options?: AxiosRequestConfig) {
        return GifsApiFp(this.configuration).searchGifs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIF 
     * @summary Translate phrase to GIF
     * @param {GifsApiTranslatePhraseGifRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GifsApiGenerated
     */
    public translatePhraseGif(requestParameters: GifsApiTranslatePhraseGifRequest, options?: AxiosRequestConfig) {
        return GifsApiFp(this.configuration).translatePhraseGif(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
